/*MCU(单片机) 是 Micro Controller Unit的简称。
	与 CPU 相比，MCU 内部集成了：CPU, RAM, ROM, 定时器，中断系统，通讯接口等计算机常用的硬件，它是一台完整的计算机，而 CPU 只是 CPU。
	单片机的任务是信息采集（依靠传感器），信息处理（依靠CPU），硬件设备的控制。
	晶振是石英振荡器的简称，为系统提供基本的时钟信号。
		晶振是一种物理器件，由晶体谐振和放大器组成，用于产生稳定的高频振荡信号。 
		而时钟芯片则是一种包含了多种复杂电路的芯片，可以实现计数、分频、时钟调整等多种功能。 
		简单来说，晶振只提供高频振荡信号，而时钟芯片则是在此基础上实现了更多功能。
	单片机只能处理数字信号。
		TTL（transistor transistor logic）即晶体管-晶体管逻辑电平。TTL电平信号规定，+5V等价于逻辑“1”，0 V等价于逻辑“0”(采用二进制来表示数据时)
		模拟信号的取值是连续的，可以在某一取值范围内取无穷多个值，比如 0V ~ 5V.
		而数字信号的取值是离散的，只能在特定的取值集合中选择，比如 要么高电平，要么低电平。
	寄存器！！！！

51单片机是80年代intel开发的8051内核的统称，所有和其内核一样的单片机都叫51单片机，它有8位。
本次使用的单片机型号为 STC89C52RC 40I-PDIP40
	代表这STC 公司生产的8051内核，程序空间 8K 字节，512 位 RAM，工作频率可达 40MHz，工作温度范围(工业级) -40℃ ~ 85℃，PDIP 封装类型，40管脚数。
		RAM(Random Access Memory) 是一种临时存储器，用于存储计算机正在运行的程序和数据，它具有快速的读写速度和随机访问的特点。断电时数据丢失。
		ROM(Read-Only Memory) 是一种只读存储器，用于存储固定的程序指令和数据。断电时数据不会丢失，因此被称为非易失性存储器。
		PDIP 塑料双列直插，芯片封装材料为塑料。
*/

//在 Keil 上新建项目时，型号选择 Atmel 的 AT89C52 

// C51支持的数据类型：
	//整型
		// int(有符号)，占 16 位，范围 -32768 ~ 32767
		// short(有符号)，占 16 位，范围 -32768 ~ 32767
		// long(有符号)，占 32 位，范围 -2147483648 ~ 2147483647

		// unsighed int，占 16 位，范围 0 ~ 65535
		// unsighed short int，占 16 位，范围 0 ~ 65535
		// unsighed long int，占 32 位，范围 0 ~ 4294967295
	//实型
		// float，占 32 位，范围 3.4e^-38 ~ 3.4e^38
		// double，占 64 位，范围 1.7e^-308 ~ 1.7e^308
	//字符型
		// char(有符号)，占 8 位，范围 -128 ~ 127
		// unsighed char，占 8 位，范围 0 ~ 255

//位运算：
	//按位左移：将一个运算对象的各二进制位全部左移若干位，高位丢弃，低位补0。例，1010 1110 << 2 ，则左移2位、右补0，即得 1011 1000
	//按位右移：
	//按位与
	//按位或
	//按位异或
	//按位取反

//例子，点亮一个 LED
//#include <REGX52.H>
//int main()
//{
//	int P2 = 0;	//这里本来引脚是 P2.0 到 P2.7 八个引脚控制8个 LED，0000 0000 代表全亮，1111 1111 代表全灭。
//		//如果想要控制单个 LED，可以去头文件里查找，比如这里 P2.0 就是 P2_0		
//		//0xAA是十六进制数，转换成二进制就为1010 1010。
//		//单片机一般阅读由右向左阅读，即第一位为代表第一个灯——0（低电平），可以发生正向导通。
//	return 0;
//}

//例子，LED 流水灯
//#include <REGX52.H>
//
// void Delayms(unsigned int x )	//延时函数，单位毫秒。 系统频率@12.000MHz
//{
//	unsigned char data i, j;
//	while(x)	//当 x 不为0时进入延时
//	{
//		i = 2;	// i,j 是根据晶振频率算出来的参数。 数字变大，延时更长。此处为 1ms延时
//		j = 239;
//		do
//		{
//			while (--j);
//		} 
//		while (--i);
//		x--;	// X 逐渐减小		
//	}	
//}
//
//int main()
//{
//	while(1)
//	{
//		P2 = 0XFE;
//		Delayms(100);
//		P2 = 0XFD;
//		Delayms(100);
//		P2 = 0XFB;
//		Delayms(100);
//		P2 = 0XF7;
//		Delayms(100);
//		P2 = 0XEF;
//		Delayms(100);
//		P2 = 0XDF;
//		Delayms(100);
//		P2 = 0XBF;
//		Delayms(100);
//		P2 = 0X7F;
//		Delayms(100);		
//	}
//	return 0;
//}

//例子，按键控制LED亮灭
//#include <REGX52.H>
//int main()
//{
//	while (1)
//	{
//		if (0 == P3_1)	//检测是否 K1 按键按下，按下代表导通
//		{
//	 		P2_0 = 0;
//		}
//		else
//		{
//			P2_0 = 1;
//		}		
//	}	
//	return 0;
//}

//例子，显示按键进度条
#include <REGX52.H>

void Delayms(unsigned int x )	//延时函数，单位毫秒。 系统频率@12.000MHz
{
	unsigned char data i, j;
	while(x)	
	{
		i = 2;	
		j = 239;
		do
		{
			while (--j);
		} 
		while (--i);
		x--;		
	}	
}

int main()
{
	while (1)
	{
		if (0 == P3_1)	//检测是否 K1 按键按下，按下代表导通
		{
	 		P2_0 = 0;
			Delayms(200);
			P2_1 = 0;
			Delayms(200);
			P2_2 = 0;
			Delayms(200);
			P2_3 = 0;
			Delayms(200);
			P2_4 = 0;
			Delayms(200);
			P2_5 = 0;
			Delayms(200);
			P2_6 = 0;
			Delayms(200);
			P2_7 = 0;
			Delayms(200);
			

		}
		else
		{
			P2_0 = 1;
		}		
	}	
	return 0;
}













